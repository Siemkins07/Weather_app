{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","search","type","value","onChange","change","Result","_props$weather","weather","error","city","temp","sunrise","sunset","pressure","wind","date","iconCode","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","tempFixed","toFixed","Fragment","toUpperCase","src","concat","alt","className","APIKey","App","state","handleInputChange","e","_this","setState","target","handleCitySearch","preventDefault","API","fetch","then","response","ok","Error","json","result","time","toLocaleString","prevState","sys","main","speed","icon","catch","err","components_Form","this","placeholder","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.878462ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.search}>\r\n            <input type=\"text\" value={props.value} onChange={props.change} />\r\n            <button>Zobacz</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = (props) => {\r\n\r\n    const { error, city, temp, sunrise, sunset, pressure, wind, date, iconCode } = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if (!error && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n        const tempFixed = temp.toFixed(1);\r\n\r\n        content = (\r\n            <>\r\n                <h3><em>{city.toUpperCase()}</em><img src={`http://openweathermap.org/img/w/${iconCode}.png`} alt=\"grafika\" /></h3>\r\n                <h4>Stan aktualny na: {date}</h4>\r\n                <h4>Temperatura: {tempFixed} &#176;C</h4>\r\n                <h4>Wiatr: {wind} m/s</h4>\r\n                <h4>Ciśnienie: {pressure} hPa</h4>\r\n                <h5>Wschód Słońca o: {sunriseTime}</h5>\r\n                <h5>Zachód Słońca o {sunsetTime}</h5>\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <div className='result'>\r\n            {error ? `Brak informacji w bazie o miejscowości  ${city}` : content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;\r\n","import React, {\n    Component\n} from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result'\n\nconst APIKey = 'a0a0f8d4f1866241fcaa209be5288f29';\n\nclass App extends Component {\n    state = {\n        value: '',\n        date: \"\",\n        city: '',\n        sunrise: '',\n        sunset: '',\n        temp: '',\n        pressure: \"\",\n        wind: '',\n        error: false,\n        iconCode: '',\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    handleCitySearch = (e) => {\n        e.preventDefault();\n        const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n        fetch(API)\n            .then(response => {\n                if (response.ok) {\n                    return response\n                }\n                throw Error('Nie udało się')\n            })\n            .then(response => response.json())\n            .then(result => {\n                const time = new Date().toLocaleString()\n                this.setState(prevState => ({\n                    error: false,\n                    date: time,\n                    city: prevState.value,\n                    sunrise: result.sys.sunrise,\n                    sunset: result.sys.sunset,\n                    temp: result.main.temp,\n                    pressure: result.main.pressure,\n                    wind: result.wind.speed,\n                    iconCode: result.weather[0].icon,\n                    value: \"\"\n                }))\n            })\n            .catch(err => {\n                this.setState(prevState => ({\n                    error: true,\n                    city: prevState.value\n                }))\n            })\n    }\n\n    render() {\n        return ( <\n            div className = 'app' >\n            <\n            Form value = {\n                this.state.value\n            }\n            placeholder = 'Wpisz miasto'\n            change = {\n                this.handleInputChange\n            }\n            search = {\n                this.handleCitySearch\n            }\n            /> <\n            Result weather = {\n                this.state\n            }\n            /> <\n            /div>\n        );\n    }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n// 4. FETCH THROW CATCH Dodawanie kolejnych userów + foto z api\n\n// import React, {\n//     Component\n// } from 'react'\n// import './App.css'\n// import ButtonFetchUsers from './ButtonFetchUsers'\n// import UsersList from './UsersList'\n\n// const API = 'https://randomuser.me/api/?results=1'\n\n// class App extends Component {\n//     state = {\n//         users: []\n//     }\n\n//     handleDataFetch = () => {\n//         // console.log('klik');\n//         fetch(API)\n//             .then(response => {\n//                 if (response.ok) {\n//                     // console.log(response)\n\n//                     return response;\n//                 }\n//                 throw Error(response.status)\n//             })\n//             .then(response => response.json())\n//             .then(result => {\n//                 const user = result.results\n//                 this.setState((prevState) => ({\n//                     users: prevState.users.concat(user)\n//                 }))\n//             })\n//             .catch(error => console.log(error + ' nie działa'))\n//     }\n\n//     render() {\n//         const users = this.state.users\n//         return ( <\n//             div >\n//             <\n//             ButtonFetchUsers click = {\n//                 this.handleDataFetch\n//             }\n//             /> {\n//                 users.length > 0 ? < UsersList users = {\n//                     users\n//                 }\n//                 /> : null} <\n//                 /div>\n//             );\n//         }\n//     }\n\n//     export default App;\n\n\n\n// 3. POBIERANIE ZA POMOCA XMLHTTPREQUEST Z (FEJOWEGO) API\n\n// import React, { Component } from 'react';\n\n// class App extends Component {\n\n//     state = {\n//         users: []\n//     }\n\n//     componentDidMount() {\n//         const xhr = new XMLHttpRequest();\n//         xhr.open('GET', 'https://jsonplaceholder.typicode.com/users', true);\n//         xhr.onload = () => {\n//             if (xhr.status === 200) {\n//                 const users = JSON.parse(xhr.response)\n//                 console.log(users);\n//                 this.setState({\n//                     users\n//                 })\n//             }\n//         }\n\n\n//         xhr.send(null)\n//     }\n\n//     render() {\n\n//         const users = this.state.users.map(user => (\n//             <div key={user.id}>\n//                 <h4>{user.name}</h4>\n//                 <p>{user.address.street}, {user.address.city}</p>\n//             </div>\n//         ))\n\n//         return (\n//             <>\n//                 {users}\n//             </>\n//         );\n//     }\n// }\n\n// export default App;\n\n\n\n\n// 2. POBIERANIE ZA POMOCA FETCH Z LOKALNEGO PLIKU (WORDS.JSON)\n\n// import React, { Component } from 'react';\n// import './App.css';\n// import Word from './Word'\n\n// class App extends Component {\n//     state = {\n//         words: [],\n//         isLoaded: false,\n//     }\n\n//     componentDidMount() {\n//         setTimeout(this.fetchData, 3000)\n//     }\n\n//     fetchData = () => {\n//         fetch('words.json')\n//             .then(response => response.json())\n//             .then(result => {\n//                 this.setState({\n//                     words: result.words,\n//                     isLoaded: !this.state.isLoaded\n//                 })\n//             })\n//     }\n\n\n//     render() {\n\n//         const words = this.state.words.map(word => (\n//             <Word key={word.id} english={word.en} polish={word.pl} />\n\n\n//         ))\n//         return (\n//             <ul>\n//                 {this.state.isLoaded ? words : \"Ładuję dane\"}\n//             </ul>\n//         )\n//     }\n// }\n\n// export default App;\n\n\n\n\n\n// 1. GENERATOR WIADOMOSCI\n\n\n// import React, { Component } from 'react';\n// import './App.css';\n\n\n// const data = [\n//   { id: 1, title: \"wiadomość 1\", body: 'zawartość wiadomości 1...' },\n//   { id: 2, title: \"wiadomość 2\", body: 'zawartość wiadomości 2...' },\n// ]\n\n// setInterval(() => {\n//   const index = data.length + 1;\n//   data.push({\n//     id: index,\n//     title: `wiadomość ${index}`,\n//     body: `zawartość wioadomości ${index} ...`\n//   })\n\n// }\n//   , 8000)\n\n// class App extends Component {\n//   state = {\n//     messages: [...data]\n//   }\n\n//   getData = () => {\n//     if (this.state.messages.length <= data.length) {\n//       this.setState({\n//         messages: [...data]\n//       })\n//     } else {\n//       console.log('brak zmian');\n//     }\n//   }\n\n//   componentDidMount() {\n//     this.idI = setInterval(this.getData, 5000)\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.idI)\n//   }\n\n//   render() {\n//     const messages = this.state.messages.map(message => (\n//       <div key={message.id}>\n//         <h4>{message.title}</h4>\n//         <p>{message.body}</p>\n//       </div>\n\n//     ))\n//     return (\n//       <div className=\"App\">\n//         {messages.reverse()}\n//       </div>\n\n//     );\n//   }\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}